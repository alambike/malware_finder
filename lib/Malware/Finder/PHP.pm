package Malware::Finder::PHP;

use strict;
use parent qw(Malware::Finder::Base);

my $MULTIPLE_OPEN_TAGS_IN_LINE = 

    qr/
        (?# Must start with an opening php tag followed by something non-space nor question mark )
        (?# ended with an finish tag)
        ^(\<\?php[^?\n]{300,}\?\>)

        (?# Followed by, maybe a separaton and another starting tag)
        [\ \t]*
        (\<(\?)?.+)
    /x;


my $CONDITIONAL_MALWARE = 

    qr|
        (?# http://blog.sucuri.net/2012/06/understanding-conditional-malware-ip-centric-variation.html )
        (?# Execute malware actions in function of user-agent and ip request procedence )
        
        (\<\?php.+\$user_agent_to_filter.+\$stop_ips_masks.+\$is_bot.+?\?\>)

    |xs;

my $BASE64_DATA = 
    qr{
        (?:([A-Za-z0-9+/]{4}\r?\n*){6,}
            (?:
                [A-Za-z0-9+/]{2} [AEIMQUYcgkosw048] = 
            |
                [A-Za-z0-9+/] [AQgw] == 
            )
        )[^=-\w]
    }x;

my $FALSE_POSITIVES= qr/
    (?:
        __icl_lang_names.+?English.+? |
        _JEXEC.+?PhocaGalleryRenderInfo.+?com_phocagallery |
        Coppermine.+?cornerleft.+?cornerright | 
        Coppermine.+?get_meta_album |
        vBulletin.+?attachment.+ | 
        Form\sMail\sScript.+?txt_wrong_html_template |
        cmsimple.+?addonsbydjot |
        t3lib_div.+?TYPO3 |
        moodlelib\.php.+?MOODLE_INTERNAL.+?get_config |
        Quinti\.net.+?recursos |
        AKEEBAENGINE.+?AKEEBA_SERVERKEY
        (?#

            admin_enqueue_scripts.+?import_epanel_javascript.+?importOptions | 
            scriptalicious | 
            dummy\.xml.+?\$dynamic_elements |
        )
    )
/xs;

my $POST_AND_MAIL = qr/
    ^
        \<\?php.+
        (
            \$\_POST\[.+\bmail\(
            |
            \bmail\(.+\$\_POST\[
        )
/xms;

my $POST_AND_EVAL = qr/
    ^
    \<\?php.+?
    (
        \$\_POST\[.+?eval\s*\(
        |
        eval\s*\(.+?\$\_POST\[
    )
/ixms;

my $PACKED_FUNCTION = qr/function_exists.+pack\(/;
my $EVAL_BASE64_DECODE = qr/eval\s*(\(gzuncompress\s*)?\(\s*base64_decode/;
my $EVAL = qr/\<\?php.+\beval\s*\(/is;
my $BASE64_POST = qr/\<\?php.+base64_decode\s*\(\$\_POST\[/is;
my $LD_PRELOAD = qr/LD_PRELOAD/;
my $PHP_OS = qr/PHP_OS\.chr/;
my $GZINFLATE = qr/gzinflate/;
my $MULTIPLE_CHR_CALLS = qr/chr\(\d+\)/;
my $LONG_LINE_WITH_EVAL_AND_TAGS = qr/^(\<\?(php)?.+eval\s*\(.+\?\>)/i;
my $LINE_TOO_LONG_LENGTH = 2000;
my $MALWARE_DOMAINS = qr/(familyy\-history\.com)/;
my $FUNCTION_OBFUSCATED = qr/function\s*l\_\_\d+\(/;
my $PHP_INLINE_CONTENT = 
    qr/
        \<\?(php)?
        (?<content>.+?)
        \?\>?
    /x;

my $PREG_REPLACE_EVAL = qr{
    (?: /\.\*/e | e/\*\./ )
}x;

my $BYTE_ESCAPED_STRING = qr/
    (?# min 6 hexadecimal chars)
    (?: \\x\d\d){6,}
/x;

my $CHR_CALLS_LIMIT = 20;

sub CHECKS {

    my $data;

    ({
        msg => 'More than 1 php opening tag in same line',
        
        f_detect => sub {
            ${$_[0]} =~ $MULTIPLE_OPEN_TAGS_IN_LINE,
        },

        f_fix => sub {
            ${$_[0]} =~ s/$MULTIPLE_OPEN_TAGS_IN_LINE/$2/;
        },
        points => 10,
    },
    {
        msg => 'Long line with eval and tags',
        
        f_detect => sub {
            ${$_[0]} =~ $LONG_LINE_WITH_EVAL_AND_TAGS,
        },

        f_fix => sub {
            ${$_[0]} =~ s/$LONG_LINE_WITH_EVAL_AND_TAGS//;
        },
        points => 5,
    },

    {
        
        msg => 'Packed function detected',
        
        f_detect => sub {
            ${$_[0]} =~ $PACKED_FUNCTION
        },

        points => 10,
    },
    {
        msg => "Malware, remove!!",
        f_detect => sub {
            ${$_[0]} =~ $EVAL_BASE64_DECODE;
        },
        points => 20,
    },
    {
        msg => "Conditional malware, remove!",
        f_detect => sub {
            ${$_[0]} =~ $CONDITIONAL_MALWARE;
        },
        f_fix => sub {
            ${$_[0]} =~ s/$CONDITIONAL_MALWARE//;
        },
        points => 20,
    },

    {
        msg => "Sending requests to malware domains!!",
        f_detect => sub {
            ${$_[0]} =~ $MALWARE_DOMAINS;
        },
        points => 20,
    },

    {
        msg => "PHP Line too long!",
        extended_check => 1,
        
        f_detect => sub {
            foreach my $line (split(/\n+/, ${$_[0]})){
                if($line =~ $PHP_INLINE_CONTENT){
                    return 1 if (length($+{content}) > $LINE_TOO_LONG_LENGTH);
                }
            }
            return undef;
        },
        points => 10,
    },
    {
        msg => "Very few lines!",
        extended_check => 1,

        f_detect => sub {

            (scalar(split("\n", ${$_[0]})) <= 3)? 
                return 1: 
                return undef;
        },
        points => 5,
    },
    {
        msg => "base64_decode from POST data detected",
        extended_check => 1,
        f_detect => sub {
            ${$_[0]} =~ $BASE64_POST,
        
        },
        points => 5,
    },

    {
        msg => "eval post data detected",
        extended_check => 1,
        f_detect => sub {
            ${$_[0]} =~ $POST_AND_EVAL;
        },
        points => 7,
    },
    {
        msg => "LD_PRELOAD detected",
        extended_check => 1,
        f_detect => sub {
            ${$_[0]} =~ $LD_PRELOAD,
        
        },
        points => 20,
    },
    {
        msg => "PHP_OS detected",
        extended_check => 1,
        f_detect => sub {
            ${$_[0]} =~ $PHP_OS,
        
        },
        points => 5,
    },
    {
        msg => "A lot of chr calls (> $CHR_CALLS_LIMIT)!",
        extended_check => 1,
        f_detect => sub {
            my $count =()= ${$_[0]} =~ /$MULTIPLE_CHR_CALLS/g;
            ($count > $CHR_CALLS_LIMIT);
        
        },
        points => 5,
    },
    {
        msg => "base64 data detected",
        #msg_out => sub {$data},
        f_detect => sub {
            ${$_[0]} =~ $BASE64_DATA
        },
        points => 10,
    },
    {
        msg => "false positives",
        f_detect => sub {
            ${$_[0]} =~ $FALSE_POSITIVES
        },
        points => -10,
    },
    {
        msg => "gzinflate func detected",
        f_detect => sub {
            ${$_[0]} =~ $GZINFLATE
        },
        points => 5,
    },
    {
        msg => 'mail function and POST data detected',
        f_detect => sub {
            ${$_[0]} =~ $POST_AND_MAIL
        },
        points => 7,
    },
    {
        msg => 'function obfuscated detected',
        f_detect => sub {
            ${$_[0]} =~ $FUNCTION_OBFUSCATED
        },
        points => 5,
    },
    {
        msg => 'preg_replace_eval detected',
        f_detect => sub {
            ${$_[0]} =~ $PREG_REPLACE_EVAL
        },
        points => 10,
    },
    {
        msg => 'byte-escaped string detected',
        f_detect => sub {
            ${$_[0]} =~ $BYTE_ESCAPED_STRING
        },
        points => 5,
    },
    )
}


sub EXTENSIONS {
    qw(php html htm);
}


1;
