#!/usr/bin/env perl

use Cwd qw(abs_path);

sub BEGIN {
    my @partes = split /\//, abs_path($0);
    pop(@partes);
    push @INC, join('/', @partes);
}

use strict;
use Getopt::Std;
use IO::Handle;

autoflush STDOUT 1;

my $CONF = {};

load_cli_args();

my $PARSER_CLASS = uc($CONF->{lang}).'MalwareFinder';
my $parser = $PARSER_CLASS->new(
    f_infected => sub { 
	print 'File ['.$_[0].'] possibly infected ('.$_[1]->{msg}.")\n";
	print `ls -l $_[0]`;
	print "\n";
    },
    fix => $CONF->{fix},
    test => $CONF->{test},
);

if($CONF->{file}){
	$parser->check_file($CONF->{file});
}
else{
	my @infected = $parser->analyze_files($CONF->{dir});
}

#################################################################

sub load_cli_args{
    my $conf = shift;

    # Mergeamos CONF cas opcions pasadas desde a linea de comandos
    my $opts = {};
    getopts("Ftd:l:f:", $opts);

    $CONF->{dir} = $opts->{d} || '.' ;
    $CONF->{lang} = $opts->{l} || 'php';
    $CONF->{file} = $opts->{f} || undef;
    $CONF->{fix} = $opts->{F} || undef;
    $CONF->{test} = $opts->{t} || undef;
}

package MalwareFinder;
use strict;
use File::Copy qw(cp);

sub new{
    my ($class, %args) = @_;
    my $self = bless({
        debug => undef,
        f_infected => sub {@_},
        current_file => '',
        current_check => undef,
        fix => undef,
	test => undef,
	extended_check => undef,
    }, $class);

    foreach (keys(%args)){
        $self->{$_} = $args{$_};
    } 

    $self;
}

sub AUTOLOAD{

    our $AUTOLOAD;

    if(defined($_[1])){
        $_[0]->{$AUTOLOAD} = $_[1];
    }
    else{
        $_[0]->{$AUTOLOAD};
    }
}

sub DESTROY{}
sub EXTENSIONS {die("Abstract")};
sub CHECKS {die("Abstract")};

sub analyze_files {

    my ($self, $dir) = @_;

    $dir =~ s/\/$//;
    opendir(my $d, $dir) || die("Error opening $dir: $!");

    my $str = join('|',$self->EXTENSIONS() );
    my $pattern = qr/\.($str)$/i;

    my @res;

    while(my $f = readdir($d)){

        next if($f =~/^\.+$/);

        push @res, $self->analyze_files("$dir/$f") if(-d "$dir/$f");

        push @res, "$dir/$f" if($f =~ $pattern && $self->check_file($dir.'/'.$f));
    }

    closedir($d);

    @res;
}

sub check_file{
    my $self = $_[0];

    my $file = $_[1];

    $self->current_file($file);

    print "Checking $file\n" if($self->{debug});

    open(my $fh, $file) || die("Can't open file $file:$!");
    my $data;
    {
       $/ = undef;
       $data = <$fh>;
    }
    close($fh);
    
    my $fixed = undef;
    
    foreach my $p ($self->CHECKS){
	next if($p->{extended_check} && !$self->{extended_checks});

	print "Executing check: ".$p->{msg}."\n" if($self->{debug});
	$self->current_check($p);

        if(&{$p->{f_detect}}(\$data)){

	    $self->{f_infected}->($file, $p);

	    if(defined($p->{f_fix})){
		    $fixed = ($p->{f_fix}->(\$data));
	    }
        }
    }

    if($self->{fix}){

	unless($fixed){
		print "$file can't be fixed\n";
		next;
	}

	if($self->{test}){
		print $data;
	}
	else{
		cp($file, $file.'.fmwbkp');
		open my $fh, '>', $file;
    		print $fh $data;
		close $fh;
		chmod(0644, $file);
	}
    }

    return undef;
}


package PHPMalwareFinder;
use parent -norequire, qw(MalwareFinder) ;
use strict;

sub CHECKS {

    my $MULTIPLE_OPEN_TAGS_IN_LINE = qr/^(\<\?php.+\?\>)[ \t]*(\<(\?)?.+)/;
    my $PACKED_FUNCTION = qr/function_exists.+pack\(/;
    my $EVAL_BASE64_DECODE = qr/\<\?(php)?\s+eval\s*(\(gzuncompress\s*)?\(\s*base64_decode/;
    my $LINE_TOO_LONG_LENGTH = 1000;


    ({
        msg => 'More than 1 php opening tag in same line',

        f_detect => sub {
		${$_[0]} =~ $MULTIPLE_OPEN_TAGS_IN_LINE,
	},

        f_fix => sub {
		${$_[0]} =~ s/$MULTIPLE_OPEN_TAGS_IN_LINE/$2/;
	},
    },
    {
        msg => 'Packed function',

	f_detect => sub {
		${$_[0]} =~ $PACKED_FUNCTION
	}

    },
    {
	msg => "Malware, remove!!",
	f_detect => sub {
		${$_[0]} =~ $EVAL_BASE64_DECODE;
	},
    },
    {
        msg => "Line too long!",
	extended_check => 1,
	f_detect => sub {

		foreach my $line (split(/\n+/, ${$_[0]})){
			return 1 if (length($line) > $LINE_TOO_LONG_LENGTH);
		}
		return undef;
	},
    },

)}


sub EXTENSIONS {
    qw(php html htm);
}


1;
